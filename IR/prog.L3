define :main (  ) {
	:entry
	t <- call :createTuple(3)
	v <- call :myF(t, 4)
	v <- call :encodeValue(v)
	call print(v)
	return
}
define :createTuple ( p1 ) {
	:entry
	x2 <- 21

	p <- call allocate(9, 1)
	addr_16807 <- p + 8
	store addr_16807 <- 0

	addr_282475249 <- p + 16
	store addr_282475249 <- 1

	addr_1622650073 <- p + 24
	store addr_1622650073 <- p1

	addr_984943658 <- p + 32
	store addr_984943658 <- x2

	return p
}
define :myF ( c, p1 ) {
	:entry
	addr_1144108930 <- c + 24
	x1 <- load addr_1144108930

	addr_470211272 <- c + 32
	x2 <- load addr_470211272

	encodedX1 <- call :encodeValue(x1)
	call print(encodedX1)
	encodedX2 <- call :encodeValue(x2)
	call print(encodedX2)
	encodedP1 <- call :encodeValue(p1)
	call print(encodedP1)
	r1 <- x1 + x2
	encodedR1 <- call :encodeValue(r1)
	call print(encodedR1)
	r2 <- r1 + p1
	return r2
}
define :encodeValue ( v ) {
	:entry
	encodedV <- v

	encodedV <- encodedV << 1
	encodedV <- encodedV + 1
	return encodedV
}
